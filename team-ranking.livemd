<!-- livebook:{"persist_outputs":true} -->

# Team Ranking

```elixir
Mix.install([
  {:explorer, "~> 0.4"},
  {:kino, "~> 0.8"},
  {:download, "~> 0.0.4"},
  {:exla, "~> 0.4"},
  {:axon, "~> 0.3"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Read in Data

```elixir
alias Explorer.DataFrame, as: DF
alias Explorer.Series, as: S
alias Explorer.TensorFrame, as: TF
# For DF.mutate
require Explorer.DataFrame

training_file = "training-data-1.tsv"
teams_file = "teams.tsv"

unless File.exists?(training_file),
  do:
    {:ok, _filename} =
      Download.from(
        "https://raw.githubusercontent.com/westbaystars/data/main/team-ranking/#{training_file}"
      )

unless File.exists?(teams_file),
  do:
    {:ok, _filename} =
      Download.from(
        "https://raw.githubusercontent.com/westbaystars/data/main/team-ranking/#{teams_file}"
      )

df = DF.from_csv!(training_file, delimiter: "\t")

teams =
  DF.from_csv!(teams_file, delimiter: "\t")
  |> DF.mutate(rank: (rank - 1) / 12)

Kino.DataTable.new(teams)
```

## Data Preparation Module

```elixir
# Needed for DF.mutate
require Explorer.DataFrame

defmodule Prep do
  def get_dummies(df, column, new_column \\ nil)

  def get_dummies(df, column, new_column)
      when column != nil and new_column == nil,
      do: get_dummies(df, column, column)

  def get_dummies(df, column, new_column) do
    series = DF.pull(df, column)
    list = S.to_list(series)

    map =
      list
      |> Enum.uniq()
      |> Enum.with_index(&{&1, String.to_integer("#{&2}")})
      |> Enum.into(%{})

    new_series = S.transform(series, fn key -> Map.get(map, key) end)

    DF.put(df, new_column, new_series)
  end

  def separate(map, id, target) do
    {
      map |> Enum.map(&Map.get(&1, id)),
      if Map.has_key?(List.first(map), target) do
        map |> Enum.map(&([[Map.get(&1, target)]] |> Nx.tensor()))
      else
        nil
      end,
      map |> Enum.map(&Map.drop(&1, [id, target]))
    }
  end

  def map_to_tensor(map) do
    map
    |> Enum.map(&([Map.values(&1)] |> Nx.tensor()))
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Prep, <<70, 79, 82, 49, 0, 0, 17, ...>>, {:map_to_tensor, 1}}
```

## Reduce Data to Numbers

```elixir
df =
  df
  |> DF.filter(games_played > 0)
  |> Prep.get_dummies("team", "team_x")
  #  |> DF.mutate(id: year * 100 + team_x)
  |> Prep.get_dummies("stats_league")
  |> Prep.get_dummies("is_new")
  |> Prep.get_dummies("is_foreign")

Kino.DataTable.new(df)
```

## Group Pitchers and Hitters

```elixir
pitcher_df =
  df
  |> DF.filter(is_pitcher)
  |> DF.group_by(["team", "team_x", "year"])
  |> DF.summarise(
    batters_faced: sum(plate_appearances),
    singles_allowed: sum(singles),
    doubles_allowed: sum(doubles),
    triples_allowed: sum(triples),
    home_runs_allowed: sum(home_runs),
    runs_allowed: sum(runs),
    strikeouts_against: sum(strikeouts),
    bases_on_balls_allowed: sum(bases_on_balls)
  )

hitter_df =
  df
  |> DF.filter(not is_pitcher)
  |> DF.group_by(["team", "team_x", "year"])
  |> DF.summarise(
    plate_appearances: sum(plate_appearances),
    singles: sum(singles),
    doubles: sum(doubles),
    triples: sum(triples),
    home_runs: sum(home_runs),
    runs_scored: sum(runs),
    strikeouts: sum(strikeouts),
    bases_on_balls: sum(bases_on_balls)
  )

teams_by_year_df = DF.join(pitcher_df, hitter_df, on: ["team", "team_x", "year"], how: :inner)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[168 x 19]
  team string ["orx", "yom", "yak", "hir", "sft", ...]
  team_x integer [1, 2, 5, 3, 7, ...]
  year integer [2009, 2009, 2009, 2009, 2009, ...]
  batters_faced integer [5292, 5289, 5220, 4886, 4415, ...]
  singles_allowed integer [1146, 1083, 1035, 1021, 906, ...]
  doubles_allowed integer [0, 2, 16, 1, 0, ...]
  triples_allowed integer [0, 0, 1, 0, 1, ...]
  home_runs_allowed integer [122, 109, 140, 110, 103, ...]
  runs_allowed integer [922, 1101, 872, 811, 943, ...]
  strikeouts_against integer [321, 340, 371, 392, 314, ...]
  bases_on_balls_allowed integer [569, 516, 535, 532, 492, ...]
  plate_appearances integer [6033, 5043, 5237, 4810, 5664, ...]
  singles integer [940, 830, 950, 935, 971, ...]
  doubles integer [298, 232, 200, 164, 252, ...]
  triples integer [20, 13, 33, 8, 38, ...]
  home_runs integer [171, 174, 85, 83, 103, ...]
  runs_scored integer [709, 618, 582, 479, 610, ...]
  strikeouts integer [1041, 858, 801, 725, 1016, ...]
  bases_on_balls integer [477, 330, 387, 315, 364, ...]
>
```

## Prepare the Training Set

```elixir
left =
  teams_by_year_df
  |> DF.filter(year < 2022)

right =
  teams
  |> DF.select(["team", "year", "rank"])

{train_ids, train_targets, train_maps} =
  DF.join(left, right, how: :left)
  |> DF.discard(["team"])
  |> DF.to_rows()
  |> Prep.separate("team_x", "rank")

training_data = Enum.zip(Prep.map_to_tensor(train_maps), train_targets)
```

<!-- livebook:{"output":true} -->

```
[
  {#Nx.Tensor<
     s64[1][17]
     [
       [477, 569, 5292, 298, 0, 171, 122, 6033, 922, 709, 940, 1146, 1041, 321, 20, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [330, 516, 5289, 232, 2, 174, 109, 5043, 1101, 618, 830, 1083, 858, 340, 13, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [387, 535, 5220, 200, 16, 85, 140, 5237, 872, 582, 950, 1035, 801, 371, 33, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [315, 532, 4886, 164, 1, 83, 110, 4810, 811, 479, 935, 1021, 725, 392, 8, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [364, 492, 4415, 252, 0, 103, 103, 5664, 943, 610, 971, 906, 1016, 314, 38, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [294, 523, 4942, 172, 2, 80, 103, 3968, 877, 397, 657, 1103, 617, 311, 13, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [459, 475, 5033, 206, 0, 105, 78, 5446, 922, 606, 974, 1090, 931, 359, 28, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [353, 605, 5400, 251, 1, 171, 116, 5051, 897, 656, 791, 1167, 948, 420, 21, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [415, 585, 4940, 244, 0, 108, 102, 4857, 816, 587, 776, 1091, 811, 317, 29, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [377, 445, 4401, 211, 1, 83, 121, 5113, 735, 510, 838, 858, 963, 323, 26, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [249, 638, 5122, 190, 0, 124, 159, 4166, 840, 459, 705, 1074, 697, 401, 14, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.9166666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [427, 506, 4841, 205, 1, 99, 88, 5313, 958, 577, 941, 1022, 764, 395, 18, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [324, 489, 5369, 216, 212, 178, 116, 4957, 954, 619, 878, 830, 868, 366, 17, 18, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [377, 530, 4834, 199, 190, 116, 126, 5158, 771, 545, 887, 812, 809, 352, 18, 17, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [295, 463, 4392, 144, 163, 59, 94, 3973, 734, 421, 664, 744, 614, 293, 28, 26, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [401, 493, 5202, 196, 196, 132, 99, 4810, 945, 571, 801, 837, 764, 352, 16, 15, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [353, 502, 4944, 199, 204, 105, 97, 4592, 919, 483, 764, 786, 698, 388, 23, 27, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [351, 656, 5091, 227, 232, 95, 131, 4903, 899, 521, 853, 866, 861, 398, 11, 21, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [475, 511, 4885, 259, 195, 153, 123, 5853, 1095, 658, 933, 718, 1023, 417, 30, 17, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [414, 598, 5564, 257, 238, 164, 140, 5424, 1056, 646, 850, 851, 1039, 506, 23, 23, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [458, 532, 4511, 214, 235, 136, 102, 4899, 801, 578, 767, 763, 930, 299, 22, 17, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [363, 447, 3984, 224, 183, 133, 108, 5423, 700, 539, 848, 634, 1062, 290, 19, 13, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.9166666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [431, 555, 5162, 222, 209, 106, 116, 5184, 908, 582, 881, 860, 826, 396, 22, 35, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [376, 444, 4407, 253, 191, 77, 109, 4879, 810, 612, 847, 668, 815, 330, 26, 4, 2010]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [467, 584, 5224, 230, 222, 142, 125, 5179, 880, 645, 859, 902, 923, 367, 18, 28, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [373, 553, 4954, 203, 198, 209, 124, 4820, 921, 671, 765, 813, 802, 336, 21, 21, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [425, 590, 5129, 219, 230, 116, 116, 4891, 902, 580, 804, 832, 896, 435, 7, 25, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [408, 602, 5399, 220, 226, 107, 140, 4942, 977, 571, 853, 906, 698, 408, 18, 15, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [341, 588, 4757, 205, 191, 95, 136, 4858, 762, 553, 855, 845, 775, 375, 26, 19, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [352, 589, 5399, 218, 205, 119, 95, 4909, 1049, 570, 806, 918, 936, 426, 24, 17, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [439, 498, 5276, 206, 201, 116, 117, 4871, 953, 505, 809, 818, 818, 402, 21, 17, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [377, 621, 5496, 237, 242, 174, 131, 5412, 982, 734, 1012, 885, 852, 402, 23, 28, 2011]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [296, 702, 6324, 183, 256, 75, 139, 4087, 1080, 439, 724, 1074, 723, 513, 19, 15, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [447, 584, 5390, 274, 240, 161, 95, 6481, 1225, 763, 1118, 826, 1120, 470, 31, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [411, 725, 5370, 195, 257, 103, 177, 5326, 864, 542, 899, 933, 966, 388, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.9166666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [309, 537, 5238, 201, 200, 83, 123, 4456, 884, 492, 808, 891, 743, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [328, 429, 4793, 192, 179, 61, 72, 5247, 878, 434, 930, 801, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [376, 427, 4255, 177, 167, 93, 68, 4943, 699, 531, 795, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [309, 435, 4596, 153, 155, 49, 71, 4683, 857, 412, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [303, 445, 6071, 166, 184, 102, 83, 4438, 1179, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [358, 521, 5250, 178, 187, 51, 77, 5186, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [316, 509, 5415, 158, 187, 63, 73, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [397, 345, 4470, 160, 125, 79, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [273, 540, 5242, 127, 209, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.9166666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [326, 417, 5009, 175, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [330, 482, 5189, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [301, 277, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       [315, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       ...
     ]
   >},
  {#Nx.Tensor<
     s64[1][17]
     [
       ...
     ]
   >, ...},
  {...},
  ...
]
```

## Create a Model

```elixir
# Dynamic length, 14 columns
model =
  Axon.input("input", shape: {nil, 17})
  |> Axon.dense(128, activation: :tanh)
  |> Axon.dropout(rate: 0.2)
  |> Axon.dense(128, activation: :tanh)
  |> Axon.dense(2, activation: :sigmoid)

trained_state =
  model
  |> Axon.Loop.trainer(:mean_squared_error, Axon.Optimizers.adam(0.0005))
  |> Axon.Loop.metric(:accuracy, "Accuracy")
  |> Axon.Loop.run(training_data, %{}, epochs: 20, compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```
Epoch: 0, Batch: 150, Accuracy: 0.4966888 loss: 0.0984443
Epoch: 1, Batch: 150, Accuracy: 0.4503311 loss: 0.0920036
Epoch: 2, Batch: 150, Accuracy: 0.4966888 loss: 0.0897814
Epoch: 3, Batch: 150, Accuracy: 0.4437086 loss: 0.0876939
Epoch: 4, Batch: 150, Accuracy: 0.4834439 loss: 0.0861530
Epoch: 5, Batch: 150, Accuracy: 0.5430465 loss: 0.0852859
Epoch: 6, Batch: 150, Accuracy: 0.4768210 loss: 0.0845584
Epoch: 7, Batch: 150, Accuracy: 0.4304636 loss: 0.0839534
Epoch: 8, Batch: 150, Accuracy: 0.5231789 loss: 0.0835044
Epoch: 9, Batch: 150, Accuracy: 0.5364239 loss: 0.0830318
Epoch: 10, Batch: 150, Accuracy: 0.5231787 loss: 0.0826192
Epoch: 11, Batch: 150, Accuracy: 0.5165564 loss: 0.0822404
Epoch: 12, Batch: 150, Accuracy: 0.5165563 loss: 0.0818989
Epoch: 13, Batch: 150, Accuracy: 0.5231789 loss: 0.0815891
Epoch: 14, Batch: 150, Accuracy: 0.4966888 loss: 0.0813097
Epoch: 15, Batch: 150, Accuracy: 0.4900661 loss: 0.0810578
Epoch: 16, Batch: 150, Accuracy: 0.4834437 loss: 0.0808275
Epoch: 17, Batch: 150, Accuracy: 0.4900661 loss: 0.0806144
Epoch: 18, Batch: 150, Accuracy: 0.4834437 loss: 0.0804171
Epoch: 19, Batch: 150, Accuracy: 0.4569537 loss: 0.0802380
```

<!-- livebook:{"output":true} -->

```
%{
  "dense_0" => %{
    "bias" => #Nx.Tensor<
      f32[128]
      EXLA.Backend<host:0, 0.331605086.1316093976.89261>
      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00501610804349184, 0.0, 0.018224306404590607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0034574465826153755, 0.0, 0.0, 0.0, -0.0037260979879647493, -0.025910958647727966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...]
    >,
    "kernel" => #Nx.Tensor<
      f32[17][128]
      EXLA.Backend<host:0, 0.331605086.1316093976.89262>
      [
        [0.16913791000843048, -0.008431772701442242, 0.1521848738193512, 0.06843681633472443, 0.09409907460212708, -0.20014415681362152, 0.17456017434597015, 0.08451608568429947, -0.0678110346198082, -0.12997902929782867, 0.02984848991036415, 0.10861615091562271, 0.06589009612798691, 0.10540702939033508, -0.07732874155044556, 0.079581618309021, -0.14758412539958954, -0.06256059557199478, 0.12984231114387512, 0.07295453548431396, 0.06454847007989883, 0.14356550574302673, 0.15202797949314117, 0.039819180965423584, -0.03294024616479874, 0.07633461803197861, -0.01900903880596161, -0.17690756916999817, -0.07109295576810837, 0.1483611762523651, -0.06506357342004776, -0.0884387269616127, 0.18220524489879608, 0.1834012120962143, 0.19602572917938232, -0.02749154157936573, 0.1522657722234726, 0.16876256465911865, -0.02220427617430687, 0.18938055634498596, 0.17200234532356262, -0.016076698899269104, 0.20165009796619415, -0.19882149994373322, 0.13992737233638763, -0.15146923065185547, -0.044092949479818344, ...],
        ...
      ]
    >
  },
  "dense_1" => %{
    "bias" => #Nx.Tensor<
      f32[128]
      EXLA.Backend<host:0, 0.331605086.1316093976.89263>
      [-0.010910960845649242, 0.008977828547358513, -5.202463362365961e-4, -0.003347237128764391, -0.0017542719142511487, -0.0033316011540591717, 0.013926810584962368, 0.015731798484921455, 0.0023932282347232103, 0.0017924800049513578, 0.0021831037010997534, 0.014018457382917404, 0.009025350213050842, 0.015980247408151627, 0.015521463938057423, -0.005758570972830057, -0.012474296614527702, 0.003212231444194913, -0.019109230488538742, 0.01709902100265026, 0.003573931520804763, 0.00940230768173933, 6.837726687081158e-5, -0.021834777668118477, -0.014089534990489483, -0.013782409951090813, -0.0027769990265369415, 6.856848485767841e-4, 0.0013379973825067282, 0.0033780140802264214, -8.945354493334889e-4, -0.005561335943639278, -0.008525206707417965, -0.002822746755555272, 0.0032393073197454214, 0.016670526936650276, -5.261736223474145e-4, 0.01555997971445322, 0.00328216515481472, 0.012552806176245213, 9.737117798067629e-4, -0.004639531951397657, -0.010531123727560043, 0.007915007881820202, -0.010827275924384594, 0.0110514797270298, -0.010941198095679283, ...]
    >,
    "kernel" => #Nx.Tensor<
      f32[128][128]
      EXLA.Backend<host:0, 0.331605086.1316093976.89264>
      [
        [0.13551409542560577, 0.0698152557015419, 0.055156026035547256, 0.12273038178682327, -0.09045671671628952, 0.07201401889324188, 0.11380530893802643, 0.10500729829072952, -0.00303424964658916, -0.029497306793928146, 0.06490502506494522, -0.04699201136827469, -0.006339486222714186, 0.008304390124976635, 0.04098596051335335, -0.05210037901997566, 0.12193664908409119, 0.10397438704967499, 0.09427428245544434, -0.1433245986700058, 0.1318119317293167, 0.10626662522554398, -0.08358073979616165, -0.013658729381859303, 0.05520243942737579, 0.031369395554065704, 0.06144760549068451, -0.06575047224760056, 0.10215184092521667, 0.025128992274403572, 0.10526245832443237, 0.03378188610076904, -0.09966862946748734, 0.028098871931433678, -0.14705964922904968, 0.008999206125736237, -0.06121581047773361, -0.15619246661663055, -0.08270234614610672, -0.15804535150527954, 0.08429469168186188, 0.07259857654571533, 0.15979312360286713, -0.017182717099785805, -0.12006909400224686, -0.14400306344032288, ...],
        ...
      ]
    >
  },
  "dense_2" => %{
    "bias" => #Nx.Tensor<
      f32[2]
      EXLA.Backend<host:0, 0.331605086.1316093976.89265>
      [-0.0018278995994478464, 0.0019541801884770393]
    >,
    "kernel" => #Nx.Tensor<
      f32[128][2]
      EXLA.Backend<host:0, 0.331605086.1316093976.89266>
      [
        [0.02238374389708042, -0.18232960999011993],
        [0.14324559271335602, 0.11062397062778473],
        [0.12278719991445541, -0.09964684396982193],
        [-0.0373300239443779, 0.14044326543807983],
        [-0.02094290964305401, -0.1822144240140915],
        [-0.0489947535097599, -0.14083969593048096],
        [-0.0063890619203448296, 0.21593552827835083],
        [0.1322038769721985, 0.0394408144056797],
        [0.05114239826798439, 0.13945457339286804],
        [0.049343042075634, 0.15176527202129364],
        [-0.08411425352096558, 0.17357158660888672],
        [-0.11696670949459076, -0.01950875297188759],
        [0.03685392439365387, -0.1442338526248932],
        [-0.06872197240591049, 0.19421029090881348],
        [-0.037434693425893784, 0.11635934561491013],
        [0.023560183122754097, -0.08289812505245209],
        [0.018032893538475037, 0.0896020159125328],
        [-0.012058978900313377, -0.042546596378088],
        [0.03010447882115841, 0.02978665567934513],
        [-0.055783458054065704, -0.157446950674057],
        [-0.035235658288002014, -0.07576484978199005],
        [-0.15185338258743286, -0.016135256737470627],
        [-0.07419455051422119, ...],
        ...
      ]
    >
  }
}
```

## Create Test Data and Make Predictions

```elixir
test =
  teams_by_year_df
  |> DF.filter(year == 2022)

{test_ids, _, test_maps} =
  test
  |> DF.discard(["team"])
  |> DF.to_rows()
  |> Prep.separate("team_x", "rank")

result =
  Prep.map_to_tensor(test_maps)
  |> Enum.map(&(Axon.predict(model, trained_state, &1) |> Nx.to_flat_list() |> List.first()))

predictions =
  test
  |> DF.filter(year == 2022)
  |> DF.to_series()
  |> then(&S.to_list(&1["team"]))
  |> then(&DF.new(team: &1, rank: result))

Kino.DataTable.new(predictions)
```
