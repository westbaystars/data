<!-- livebook:{"persist_outputs":true} -->

# Team Ranking

```elixir
Mix.install([
  {:explorer, "~> 0.4"},
  {:kino, "~> 0.8"},
  {:download, "~> 0.0.4"},
  {:exla, "~> 0.4"},
  {:axon, "~> 0.3"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Read in Data

```elixir
alias Explorer.DataFrame, as: DF
alias Explorer.Series, as: S
alias Explorer.TensorFrame, as: TF
# For DF.mutate
require Explorer.DataFrame

training_file = "training-data-1.tsv"
teams_file = "teams.tsv"

unless File.exists?(training_file),
  do:
    {:ok, _filename} =
      Download.from(
        "https://raw.githubusercontent.com/westbaystars/data/main/team-ranking/#{training_file}"
      )

unless File.exists?(teams_file),
  do:
    {:ok, _filename} =
      Download.from(
        "https://raw.githubusercontent.com/westbaystars/data/main/team-ranking/#{teams_file}"
      )

df = DF.from_csv!(training_file, delimiter: "\t")

teams =
  DF.from_csv!(teams_file, delimiter: "\t")
  |> DF.mutate(rank: (rank - 1) / 12)

# Kino.DataTable.new(df)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[168 x 7]
  team string ["yom", "nip", "chu", "rak", "sft", ...]
  year integer [2009, 2009, 2009, 2009, 2009, ...]
  wins integer [89, 82, 81, 77, 74, ...]
  losses integer [46, 60, 62, 66, 65, ...]
  ties integer [9, 2, 1, 1, 5, ...]
  win_pcnt float [0.659, 0.577, 0.566, 0.538, 0.532, ...]
  rank float [0.0, 0.08333333333333333, 0.16666666666666666, 0.25, 0.3333333333333333, ...]
>
```

## Transform team and stats_league into Numbers

```elixir
defmodule Prep do
  def get_dummies(df, column, new_column \\ nil)

  def get_dummies(df, column, new_column)
      when column != nil and new_column == nil,
      do: get_dummies(df, column, column)

  def get_dummies(df, column, new_column) do
    series = DF.pull(df, column)
    list = S.to_list(series)

    map =
      list
      |> Enum.uniq()
      |> Enum.with_index(&{&1, String.to_integer("#{&2}")})
      |> Enum.into(%{})

    new_series = S.transform(series, fn key -> Map.get(map, key) end)

    DF.put(df, new_column, new_series)
  end

  def separate(map, id, target) do
    {
      map |> Enum.map(&Map.get(&1, id)),
      if Map.has_key?(List.first(map), target) do
        map |> Enum.map(&([[Map.get(&1, target)]] |> Nx.tensor()))
      else
        nil
      end,
      map |> Enum.map(&Map.drop(&1, [id, target]))
    }
  end

  def map_to_tensor(map) do
    map
    |> Enum.map(&([Map.values(&1)] |> Nx.tensor()))
  end
end

df =
  df
  |> DF.filter(games_played > 0)
  |> Prep.get_dummies("team", "team_x")
  # |> DF.mutate(id: year * 100 + team_x)
  |> Prep.get_dummies("stats_league")
  |> Prep.get_dummies("is_pitcher")
  |> Prep.get_dummies("is_new")
  |> Prep.get_dummies("is_foreign")

Kino.DataTable.new(df)
```

```elixir
left =
  df
  |> DF.filter(year < 2022)

right =
  teams
  |> DF.select(["team", "year", "rank"])

{train_ids, train_targets, train_maps} =
  DF.join(left, right, how: :left)
  |> DF.discard(["id", "team"])
  |> DF.to_rows()
  |> Prep.separate("team_x", "rank")

training_data = Enum.zip(Prep.map_to_tensor(train_maps), train_targets)
```

<!-- livebook:{"output":true} -->

```
[
  {#Nx.Tensor<
     s64[1][14]
     [
       [17, 0, 32, 8, 0, 0, 0, 200, 34, 29, 0, 9, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [6, 5, 55, 0, 0, 0, 1, 137, 12, 21, 0, 15, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [44, 27, 125, 24, 0, 0, 1, 484, 60, 65, 0, 66, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [4, 0, 11, 1, 0, 0, 0, 53, 6, 16, 0, 2, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [39, 0, 41, 8, 0, 0, 0, 348, 61, 78, 0, 26, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [57, 0, 25, 8, 0, 0, 0, 656, 111, 150, 0, 41, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [32, 0, 24, 8, 0, 0, 0, 242, 28, 61, 0, 12, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [42, 29, 112, 14, 0, 0, 1, 500, 85, 106, 0, 47, 5, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [34, 8, 135, 4, 0, 0, 1, 443, 49, 90, 0, 76, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [11, 0, 44, 0, 0, 0, 0, 199, 35, 43, 0, 9, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [55, 0, 15, 7, 0, 0, 0, 411, 105, 82, 0, 39, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [3, 7, 55, 1, 0, 0, 1, 105, 11, 16, 0, 18, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [35, 15, 130, 4, 0, 0, 1, 591, 64, 110, 0, 81, 2, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [0, 0, 24, 0, 0, 0, 1, 19, 2, 3, 0, 5, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [35, 22, 94, 8, 0, 0, 1, 410, 54, 78, 0, 83, 4, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [27, 0, 12, 5, 0, 0, 0, 255, 30, 62, 0, 20, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [10, 0, 66, 2, 0, 0, 0, 179, 45, 31, 0, 17, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [81, 0, 29, 16, 0, 0, 0, 662, 122, 149, 0, 60, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.25]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [50, 0, 42, 9, 1, 0, 0, 436, 85, 95, 0, 26, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [1, 3, 31, 0, 0, 0, 1, 52, 3, 8, 0, 8, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [19, 5, 101, 7, 0, 0, 1, 339, 27, 65, 0, 52, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [14, 7, 68, 2, 0, 0, 1, 180, 29, 29, 0, 37, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [23, 13, 125, 7, 0, 0, 1, 390, 62, 67, 0, 67, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.6666666865348816]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [2, 0, 3, 0, 0, 0, 0, 21, 1, 6, 0, 0, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [42, 12, 97, 5, 1, 0, 1, 323, 35, 59, 0, 51, 3, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [73, 15, 144, 0, 0, 0, 1, 645, 94, 160, 0, 87, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [1, 1, 10, 2, 0, 0, 1, 22, 2, 1, 0, 6, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [1, 2, 29, 0, 0, 0, 1, 55, 8, 8, 0, 17, 1, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [3, 0, 4, 1, 0, 0, 0, 22, 2, 2, 0, 4, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.75]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [17, 9, 77, 3, 1, 0, 1, 158, 21, 18, 0, 28, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [33, 0, 15, 7, 1, 0, 0, 312, 47, 60, 0, 18, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [24, 13, 78, 20, 1, 0, 1, 279, 43, 27, 0, 76, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [30, 19, 130, 27, 1, 0, 1, 521, 59, 64, 0, 139, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [14, 9, 55, 5, 1, 0, 1, 159, 14, 22, 0, 53, 0, 2009]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [40, 0, 39, 7, 1, 0, 0, 474, 107, 94, 0, 33, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [62, 28, 138, 36, 1, 0, 1, 576, 88, 93, 0, 110, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [44, 0, 25, 11, 0, 0, 0, 764, 208, 125, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [1, 0, 1, 0, 0, 0, 0, 22, 2, 4, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.0833333358168602]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [0, 0, 3, 0, 0, 0, 1, 1, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [1, 0, 1, 0, 0, 0, 1, 3, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [23, 0, 8, 6, 0, 0, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [24, 12, 93, 7, 1, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.1666666716337204]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [0, 0, 2, 0, 0, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.3333333432674408]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [18, 0, 55, 3, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.5833333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [13, 1, 42, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.4166666567325592]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [53, 40, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       [0.8333333134651184]
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       [2, ...]
     ]
   >,
   #Nx.Tensor<
     f32[1][1]
     [
       ...
     ]
   >},
  {#Nx.Tensor<
     s64[1][14]
     [
       ...
     ]
   >, ...},
  {...},
  ...
]
```

```elixir
# Dynamic length, 14 input columns
model =
  Axon.input("input", shape: {nil, 14})
  # Add hyperbolic tangent dense layer with 48 output units
  |> Axon.dense(48, activation: :tanh)
  # Add a low dropout rate to network
  |> Axon.dropout(rate: 0.2)
  |> Axon.dense(48, activation: :tanh)
  # Add single Sigmoid layer with single output unit
  |> Axon.dense(1, activation: :sigmoid)

trained_state =
  model
  |> Axon.Loop.trainer(:mean_squared_error, Axon.Optimizers.adam(0.0005))
  |> Axon.Loop.metric(:accuracy, "Accuracy")
  |> Axon.Loop.run(training_data, %{}, epochs: 20, compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```
Epoch: 0, Batch: 7100, Accuracy: 0.0646386 loss: 0.0845785
Epoch: 1, Batch: 7100, Accuracy: 0.0726658 loss: 0.0840502
Epoch: 2, Batch: 7100, Accuracy: 0.0737924 loss: 0.0838646
Epoch: 3, Batch: 7100, Accuracy: 0.0737924 loss: 0.0837649
Epoch: 4, Batch: 7100, Accuracy: 0.0730884 loss: 0.0837106
Epoch: 5, Batch: 7100, Accuracy: 0.0732292 loss: 0.0836797
Epoch: 6, Batch: 7100, Accuracy: 0.0721026 loss: 0.0836628
Epoch: 7, Batch: 7100, Accuracy: 0.0723842 loss: 0.0836479
Epoch: 8, Batch: 7100, Accuracy: 0.0726659 loss: 0.0836352
Epoch: 9, Batch: 7100, Accuracy: 0.0721026 loss: 0.0836265
Epoch: 10, Batch: 7100, Accuracy: 0.0722434 loss: 0.0836191
Epoch: 11, Batch: 7100, Accuracy: 0.0721026 loss: 0.0836138
Epoch: 12, Batch: 7100, Accuracy: 0.0721026 loss: 0.0836098
Epoch: 13, Batch: 7100, Accuracy: 0.0718208 loss: 0.0836071
Epoch: 14, Batch: 7100, Accuracy: 0.0719617 loss: 0.0836045
Epoch: 15, Batch: 7100, Accuracy: 0.0721026 loss: 0.0836017
Epoch: 16, Batch: 7100, Accuracy: 0.0715392 loss: 0.0836006
Epoch: 17, Batch: 7100, Accuracy: 0.0718208 loss: 0.0835995
Epoch: 18, Batch: 7100, Accuracy: 0.0718208 loss: 0.0835984
Epoch: 19, Batch: 7100, Accuracy: 0.0716801 loss: 0.0835977
```

<!-- livebook:{"output":true} -->

```
%{
  "dense_0" => %{
    "bias" => #Nx.Tensor<
      f32[48]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20971>
      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.008589889854192734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    >,
    "kernel" => #Nx.Tensor<
      f32[14][48]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20972>
      [
        [-0.2903549373149872, 0.08938854187726974, 0.0037711746990680695, 0.2352423518896103, 0.14541688561439514, -0.15160639584064484, 0.15681874752044678, -0.12157406657934189, -0.016131587326526642, -0.089576855301857, 0.1645541489124298, 0.2924584150314331, 0.08782410621643066, -0.030774611979722977, 0.21085551381111145, -0.1532852053642273, 0.2743827998638153, 0.1803496778011322, -0.16966859996318817, -0.3028034567832947, 0.3079302906990051, 0.0939645916223526, 0.0027716050390154123, -0.005868661683052778, -0.043541766703128815, -0.13606184720993042, 0.08035977929830551, 0.20923826098442078, -0.11636067926883698, -0.24178090691566467, 0.05502365157008171, -0.1388658732175827, 0.21492937207221985, 0.23528359830379486, 0.08230112493038177, -0.0277000293135643, -0.15447285771369934, -0.29406121373176575, 0.24785856902599335, -0.09963055700063705, -0.26311060786247253, 4.625893197953701e-4, 0.21091201901435852, -0.21189668774604797, 0.23149454593658447, 0.27078089118003845, 0.1880161166191101, ...],
        ...
      ]
    >
  },
  "dense_1" => %{
    "bias" => #Nx.Tensor<
      f32[48]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20973>
      [-0.1614956110715866, -0.1689426153898239, 0.14409996569156647, 0.12343712151050568, -0.14884410798549652, 0.13716980814933777, 0.10681585967540741, 0.14687104523181915, -0.1683879941701889, 0.1687973141670227, -0.13880608975887299, 0.1631411910057068, 0.1370258778333664, -0.13360144197940826, -0.10956420749425888, -0.17221662402153015, 0.1353669911623001, -0.12406875938177109, 0.17467981576919556, 0.16646139323711395, 0.13802224397659302, -0.13720639050006866, -0.14822812378406525, 0.15004579722881317, 0.1588844656944275, 0.14740480482578278, -0.15664036571979523, 0.13472244143486023, -0.12041465193033218, -0.002889184979721904, -0.1659342646598816, 0.15128813683986664, 0.10977927595376968, 0.1325698047876358, 0.13618245720863342, 0.15985822677612305, -0.1667400747537613, 0.15282219648361206, -0.15534430742263794, -0.14686572551727295, 0.09642552584409714, -0.15647532045841217, 0.14258165657520294, -0.1651407927274704, 0.16640594601631165, -0.16940070688724518, -0.11296737194061279, ...]
    >,
    "kernel" => #Nx.Tensor<
      f32[48][48]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20974>
      [
        [0.3991072475910187, 0.05536716803908348, -0.14414316415786743, -0.010539445094764233, 0.14739221334457397, -0.17002734541893005, -0.2835193872451782, -0.04378775134682655, 0.40198612213134766, 0.005612469278275967, 0.30848026275634766, 0.03106861747801304, -0.2736031711101532, -0.11196793615818024, -0.04341600835323334, 0.01679418608546257, -0.2009560763835907, 0.005812610033899546, 0.032666366547346115, -0.22908557951450348, -0.36524534225463867, 0.2210095077753067, 0.22350503504276276, -0.21609912812709808, -0.030636761337518692, -0.12259562313556671, 0.3256279528141022, -0.01326768659055233, 0.22949036955833435, 0.09750896692276001, 0.15455126762390137, -0.18823941051959991, 0.02013232558965683, -0.24360108375549316, -0.17680956423282623, 0.07707351446151733, 0.11541735380887985, -0.07931683957576752, 0.31109780073165894, 0.1038404256105423, -0.22236502170562744, 0.05940194055438042, -0.10572411119937897, 0.2143724262714386, -0.15305554866790771, 0.09969344735145569, ...],
        ...
      ]
    >
  },
  "dense_2" => %{
    "bias" => #Nx.Tensor<
      f32[1]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20975>
      [-0.0035152218770235777]
    >,
    "kernel" => #Nx.Tensor<
      f32[48][1]
      EXLA.Backend<host:0, 0.1132808817.2990407703.20976>
      [
        [-0.20189501345157623],
        [0.18760010600090027],
        [0.025719141587615013],
        [0.09913320094347],
        [-0.06726260483264923],
        [0.028561754152178764],
        [0.014884978532791138],
        [0.04756474867463112],
        [-0.17244766652584076],
        [-0.2371506243944168],
        [0.26856884360313416],
        [0.2821122407913208],
        [-0.210920050740242],
        [-0.07102365791797638],
        [0.03881637006998062],
        [-0.20752418041229248],
        [0.019621409475803375],
        [-0.06803444027900696],
        [0.1919480413198471],
        [0.2938174903392792],
        [-0.31560248136520386],
        [0.04234272614121437],
        [0.03957532346248627],
        [-0.3016102612018585],
        [0.13049781322479248],
        [-0.031607069075107574],
        [0.2590198516845703],
        [-0.05036991462111473],
        [-0.030024442821741104],
        [5.5135257470695365e-11],
        [-0.2609335482120514],
        [0.3260589838027954],
        [0.017955301329493523],
        [0.017542842775583267],
        [-0.02763085998594761],
        [-0.2957887351512909],
        [0.2804427742958069],
        [0.15615834295749664],
        [-0.13578692078590393],
        [0.029964419081807137],
        [0.020310604944825172],
        [0.3121066391468048],
        [0.07060260325670242],
        [-0.24414730072021484],
        [-0.23302558064460754],
        ...
      ]
    >
  }
}
```

```elixir
test =
  df
  |> DF.filter(year == 2022)

{test_ids, _, test_maps} =
  test
  |> DF.discard(["id", "team"])
  |> DF.to_rows()
  |> Prep.separate("team_x", "rank")

result =
  Prep.map_to_tensor(test_maps)
  |> Enum.map(&(Axon.predict(model, trained_state, &1) |> Nx.to_flat_list() |> List.first()))

#  |> then(& Enum.zip(test_ids, &1))
#  |> Enum.map(& [elem(&1, 0), elem(&1, 1)])
#  |> then(& [["Team", "Rank"] | &1])
```

<!-- livebook:{"output":true} -->

```
[0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.4562086760997772, 0.45620861649513245, 0.45620861649513245, 0.4562097489833832,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.4562086760997772, 0.4562097489833832, 0.45620861649513245, 0.45620861649513245,
 0.4562086760997772, 0.45620861649513245, 0.4562097489833832, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.4562086760997772, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.4562086760997772,
 0.45620861649513245, 0.45620861649513245, 0.45620861649513245, 0.45620861649513245,
 0.45620861649513245, 0.45620861649513245, 0.4562086760997772, 0.45620861649513245,
 0.45620861649513245, 0.4562086760997772, ...]
```

```elixir
map_2022 = test |> DF.filter(year == 2022) |> DF.to_series()
teams = S.to_list(map_2022["team"])
ids = S.to_list(map_2022["id"])
predictions = DF.new(id: ids, team: teams, rank: result)

Kino.DataTable.new(predictions)
```
